<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DD&#39;s Blog</title>
  
  <subtitle>《DD 非常日記》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://diyunhung.github.io/"/>
  <updated>2020-06-06T07:51:13.237Z</updated>
  <id>https://diyunhung.github.io/</id>
  
  <author>
    <name>DD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>物件的特性存取方式</title>
    <link href="https://diyunhung.github.io/2020/06/06/20200606/"/>
    <id>https://diyunhung.github.io/2020/06/06/20200606/</id>
    <published>2020-06-06T08:00:00.000Z</published>
    <updated>2020-06-06T07:51:13.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物件的特性存取方式"><a class="header-anchor" href="#物件的特性存取方式"></a>物件的特性存取方式</h1><p>Object(物件)這個型別是一個複合值(compound value)，</p><p>設定Properties(特性(或稱屬性)，可以想成有名字的索引值)，每一個都可以是任何型別。</p><p>特性的存取方式：<mark>點記號法</mark>及<mark>方括號記號法</mark></p><h2 id="點記號法-dot-natation"><a class="header-anchor" href="#點記號法-dot-natation"></a>點記號法(dot natation)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>點記號方式較短亦閱讀，會優先使用此方式</p><h2 id="方括號記號法-bracket-notation"><a class="header-anchor" href="#方括號記號法-bracket-notation"></a>方括號記號法(bracket notation)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">'a'</span>]) <span class="comment">//1</span></span><br><span class="line"><span class="comment">//''，"" 兩種皆可以</span></span><br></pre></td></tr></table></figure><p>如果特性的名稱有特殊字元，必須使用方括號記號法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj<span class="number">.123</span>     <span class="comment">//error</span></span><br><span class="line">obj.<span class="string">'123'</span>   <span class="comment">//error</span></span><br><span class="line">obj[<span class="string">'123'</span>]  <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><ul><li>使用點記號法時，屬性名稱（索引名稱）會被視為識別字，因此不能使用不合法的命名。</li><li>用方括號記號法，則視為使用字串設定屬性名稱</li></ul><h2 id="踩過的點"><a class="header-anchor" href="#踩過的點"></a>踩過的點</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//將出現的水果和次數用物件顯示</span></span><br><span class="line"><span class="keyword">const</span> fruit = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'grapes'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>, <span class="string">'orange'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumUp = fruit.reduce(<span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj.item) obj.item = <span class="number">0</span>;</span><br><span class="line">    obj.item++</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;,&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sumUp); <span class="comment">//&#123; item : 7&#125; WT..0.0?!</span></span><br></pre></td></tr></table></figure><p>注意物件存取的方式，上述範例中把值帶入變數的話：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!obj.<span class="string">'apple'</span>) obj.<span class="string">'apple'</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>就發現不對勁的地方了！<br>把點記號法改方括號就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'grapes'</span>, <span class="string">'banana'</span>, <span class="string">'mango'</span>, <span class="string">'orange'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sumUp = fruit.reduce(<span class="function">(<span class="params">obj, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj[item]) obj[item] = <span class="number">0</span>;</span><br><span class="line">    obj[item]++</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;,&#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sumUp); <span class="comment">//&#123; apple: 1, banana: 2, orange: 2, grapes: 1, mango: 1 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;物件的特性存取方式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#物件的特性存取方式&quot;&gt;&lt;/a&gt;物件的特性存取方式&lt;/h1&gt;
&lt;p&gt;Object(物件)這個型別是一個複合值(compound value)，&lt;/p&gt;
&lt;p&gt;設定Propertie
      
    
    </summary>
    
    
      <category term="JS新手村" scheme="https://diyunhung.github.io/categories/JS%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="javascript" scheme="https://diyunhung.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>二維陣列應用題：Borda Count</title>
    <link href="https://diyunhung.github.io/2020/05/29/20200529/"/>
    <id>https://diyunhung.github.io/2020/05/29/20200529/</id>
    <published>2020-05-29T06:00:00.000Z</published>
    <updated>2020-05-29T07:31:49.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>對於二維陣列的使用時機還無法快速判斷，紀錄一下解題的脈絡，幫助重整思考。</p></blockquote><p>Borda Count是一種計分方式。<a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E9%81%94%E8%A8%88%E6%95%B8%E6%B3%95" target="_blank" rel="noopener">維基通道</a></p><p>以維基百科上的範例當作題目：<br><img src="https://i.imgur.com/qEi2Fft.png" alt width="400"></p><p>理解題目：<br>設定順位第一名得3分，第二名2分，第三名1分，第四名0分<br>依照順位排序：1:張三 2:王五 3:李四 4:馬六，這樣的票數有51張，以此類推，<br>最後算出每一位的分數總和。</p><h3 id="思維"><a class="header-anchor" href="#思維"></a>思維</h3><h2 id="1-先想需要的材料："><a class="header-anchor" href="#1-先想需要的材料："></a>1. 先想需要的材料：</h2><ul><li>有票數的陣列</li><li>有權重的陣列</li><li>有候選人陣列</li><li>有候選人依權重排序的陣列</li><li>有最後計算總和的陣列</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> votes = [<span class="number">51</span>, <span class="number">5</span>, <span class="number">23</span> , <span class="number">21</span>]; <span class="comment">//票數</span></span><br><span class="line"><span class="keyword">const</span> weights = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>];    <span class="comment">//權重</span></span><br><span class="line"><span class="keyword">const</span> candidate = [c1, c2, c3, c4];  <span class="comment">//候選人</span></span><br><span class="line"><span class="keyword">const</span> scoreBoard = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]];</span><br><span class="line"><span class="comment">// 1:張三 2:王五 3:李四 4:馬六</span></span><br><span class="line"><span class="comment">// 需要一個大陣列包住數組陣列，二維陣列出現了，第一組陣列為權重3的候選人，第二組為權重2...以此類推</span></span><br><span class="line"><span class="keyword">let</span> score = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; <span class="comment">//總分計算，初始值為0，預計會做累加，按候選人順序排列</span></span><br></pre></td></tr></table></figure><h2 id="2-想要的結果"><a class="header-anchor" href="#2-想要的結果"></a>2. 想要的結果</h2><p>以候選人1張三(c1)做例子：（想一下突然卡住了）<br>得分統計要在<code>candidate = [c1, c2, c3, c4]</code>還是<code>score = [0, 0, 0, 0];</code>這裡?<br>Ermmm…<br>應該是在<code>score = [0, 0, 0, 0];</code>吧?!<code>candidate = [c1, c2, c3, c4]</code>是多的嗎？先不用他了…<br>先以pseudocode記<s>流水帳</s></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">想把score[<span class="number">0</span>] = votes[<span class="number">0</span>] * wights[<span class="number">0</span>] + votes[<span class="number">1</span>] * wieghts[<span class="number">3</span>]...</span><br></pre></td></tr></table></figure><p>連第一行都沒打完就發覺不對勁！😐 <code>votes</code>跟<code>weights</code>沒有一個規律<br>這要hardcore打完嗎？ 開始發現案情不單純…<br>再重新思考一次…</p><p><img src="https://i.ytimg.com/vi/-2Z0Y3Kk8nU/maxresdefault.jpg" alt width="300"></p><p><code>scoreBoard</code>的陣列放的是候選人編號（1~4），應該根據<code>scoreBoard</code>把權重 * 票數後丟給對應編號，<code>score</code>的表現形式就會變成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//從第一筆資料做推演</span></span><br><span class="line">score[scoreBoard[<span class="number">0</span>][<span class="number">0</span>]] = votes[<span class="number">0</span>] * weights[<span class="number">0</span>]; <span class="comment">//score[1] = 51 * 3</span></span><br><span class="line">score[scoreBoard[<span class="number">0</span>][<span class="number">1</span>]] = votes[<span class="number">1</span>] * weights[<span class="number">0</span>]; <span class="comment">//socre[2] = 5 * 3</span></span><br><span class="line">score[scoreBoard[<span class="number">0</span>][<span class="number">2</span>]] = votes[<span class="number">2</span>] * weights[<span class="number">0</span>]; <span class="comment">//score[3] = 23 *3</span></span><br><span class="line">score[scoreBoard[<span class="number">0</span>][<span class="number">3</span>]] = votes[<span class="number">3</span>] * weights[<span class="number">0</span>]; <span class="comment">//score[4] = 21 *3</span></span><br><span class="line">score[scoreBoard[<span class="number">1</span>][<span class="number">0</span>]] = votes[<span class="number">0</span>] * weights[<span class="number">1</span>]; <span class="comment">//score[2] = 51 *2</span></span><br><span class="line">score[scoreBoard[<span class="number">1</span>][<span class="number">1</span>]] = votes[<span class="number">1</span>] * weights[<span class="number">1</span>]; <span class="comment">//score[3] = 5 * 2</span></span><br><span class="line"><span class="comment">//行了！</span></span><br></pre></td></tr></table></figure><p>重整前後的思維差異<br>前：想依照候選人順序做累加，但加總計分的時找不到規律。<br>後：依照表格由左至右、由上到下計算完該格總分後給對應的候選人編號</p><h2 id="3-將想法實現成code"><a class="header-anchor" href="#3-將想法實現成code"></a>3. 將想法實現成code</h2><p>既然是依據<code>scoreBoard</code>由左至右由上到下做執行，就由他出發。<br>他是一個二維陣列，要實現查找到<code>scoreBoard[0][0]</code>的值，必須<code>forEach</code>兩次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> votes = [<span class="number">51</span>, <span class="number">5</span>, <span class="number">23</span> , <span class="number">21</span>]; <span class="comment">//票數</span></span><br><span class="line"><span class="keyword">const</span> weights = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>];    <span class="comment">//權重</span></span><br><span class="line"><span class="keyword">const</span> scoreBoard = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">let</span> score = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; </span><br><span class="line"></span><br><span class="line">scoreBoard.forEach(<span class="function"><span class="params">boardValue</span> =&gt;</span> </span><br><span class="line">    boardValue.foreach(<span class="function"><span class="params">value</span> =&gt;</span> </span><br><span class="line">        score[value] = votes[<span class="number">0</span>] * weights[<span class="number">0</span>];)</span><br></pre></td></tr></table></figure><p>可是<code>votes[0]</code>跟<code>weight[0]</code>也不該寫死，<br>此時把<code>forEach</code>方法的<code>callback</code>三個參數<code>currentValue</code>、<code>index</code>、<code>array</code>考慮進來，<br>再看一下<code>scoreBoard</code>裡的值，<br><code>scoreBoard[0]</code>都是要乘以權重<code>weight[0]</code>;<br><code>scoreBoard[n][0]</code>要乘以<code>votes[0]</code><br><mark>index</mark>該用！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> votes = [<span class="number">51</span>, <span class="number">5</span>, <span class="number">23</span> , <span class="number">21</span>]; <span class="comment">//票數</span></span><br><span class="line"><span class="keyword">const</span> weights = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>];    <span class="comment">//權重</span></span><br><span class="line"><span class="keyword">const</span> scoreBoard = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">let</span> score = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; </span><br><span class="line"></span><br><span class="line">scoreBoard.forEach(<span class="function">(<span class="params">boardValue, boardIndex</span>)=&gt;</span> &#123;</span><br><span class="line">    boardValue.forEach(<span class="function">(<span class="params">value,index</span>) =&gt;</span> &#123;</span><br><span class="line">        score[value] +=  weights[boardIndex] * votes[index];&#125;) &#125;) </span><br><span class="line">        <span class="comment">// 感覺雛形出來了！來看看結果</span></span><br><span class="line"><span class="built_in">console</span>.log(score); <span class="comment">//[0, 153, 205, 151, NaN] 恩？</span></span><br></pre></td></tr></table></figure><p><code>score</code>宣告的時候只給4個值，結果出來變5個值？！</p><p>因為<code>scoreBoard</code>出現的數字是1, 2, 3, 4，陣列的索引值從<code>0</code>開始，而<code>score[4]</code> 沒有起始值，<code>undefined + 245(任意數字)= NaN</code></p><p>再修一下就完成了！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> votes = [<span class="number">51</span>, <span class="number">5</span>, <span class="number">23</span> , <span class="number">21</span>]; <span class="comment">//票數</span></span><br><span class="line"><span class="keyword">const</span> weights = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>];    <span class="comment">//權重</span></span><br><span class="line"><span class="keyword">const</span> scoreBoard = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">let</span> score = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ,<span class="number">0</span>];  <span class="comment">//或[null, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line">scoreBoard.forEach(<span class="function">(<span class="params">boardValue, boardIndex</span>)=&gt;</span> &#123;</span><br><span class="line">    boardValue.forEach(<span class="function">(<span class="params">value,index</span>) =&gt;</span> &#123;</span><br><span class="line">        score[value] +=  weights[boardIndex] * votes[index];&#125;) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(score); <span class="comment">//[0, 153, 205, 151, 91] 跟維基百科說的一樣！＊注意人名跟得分</span></span><br></pre></td></tr></table></figure><p>從前輩學來的解題方法覺得很受用<br><mark>理解題目</mark>到<mark>希望結果</mark>的樣子，這兩個一定要先有藍圖，再來想coding使用的方法</p><p>新手村時期還在活化大腦階段，只能盡力拆解步驟想辦法找規律了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;對於二維陣列的使用時機還無法快速判斷，紀錄一下解題的脈絡，幫助重整思考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Borda Count是一種計分方式。&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%B3%A
      
    
    </summary>
    
    
      <category term="JS新手村" scheme="https://diyunhung.github.io/categories/JS%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="javascript" scheme="https://diyunhung.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>git remote 推上遠端伺服器</title>
    <link href="https://diyunhung.github.io/2020/05/26/20200526/"/>
    <id>https://diyunhung.github.io/2020/05/26/20200526/</id>
    <published>2020-05-26T15:40:00.000Z</published>
    <updated>2020-05-26T15:47:36.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-remote-推上遠端伺服器"><a class="header-anchor" href="#git-remote-推上遠端伺服器"></a>git remote 推上遠端伺服器</h1><p>一個git專案建立完成，並有<code>git commit</code>後，<br>要將自己電腦上的東西推上遠端的Git伺服器。</p><ol><li>設立遠端節點</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;語法</span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line">&#x2F;&#x2F;範例</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;diyunhung&#x2F;git_test.git</span><br></pre></td></tr></table></figure><p><code>&lt;name&gt;</code>:代名詞，慣例上叫<code>origin</code>，如果是從Server上clone下來的，預設就是叫<code>origin</code><br><code>&lt;url&gt;</code>:git 伺服器上專案的位置</p><ol start="2"><li>將本機的東西推上去</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;語法</span><br><span class="line">git push  [-u | --set-upstream] </span><br><span class="line">&#x2F;&#x2F;範例一</span><br><span class="line">git push -u origin master </span><br><span class="line">&#x2F;&#x2F;範例二</span><br><span class="line">git push -u goodideas DD</span><br></pre></td></tr></table></figure><p>範例一：</p><ol><li>把本地端分支名為<code>master</code>上的內容，指向<code>origin</code>的位置</li><li>在<code>origin</code>的遠端Server上，如果<code>master</code>不存在，就在遠端Server上建立<code>master</code>同名分支</li><li>如果Server上存在<code>master</code>分支，便會移動Server上<code>master</code>分支的位置，指向目前最新的進度</li><li>設定upstream，可以簡寫為<code>-u</code>，每個分支可設定一個，指向並追蹤該分支</li><li>設定過upstream後，下次可以直接執行<code>git push</code>將資料推上去，若沒有設定，則每次都要打完<code>git push origin master</code></li></ol><p>範例二：<br>把本機<code>DD</code>分支推上<code>goodideas</code>的遠端節點所代表的位置，並在遠端Server建立或更新名為<code>DD</code>的分支</p><h2 id="更多關於git-remote"><a class="header-anchor" href="#更多關於git-remote"></a>更多關於git remote</h2><p>顯示遠端節點名稱及url位置：<br><code>git remote -v</code></p><p>重新命名遠端節點的名稱：<br><code>git remote rename &lt;old&gt;&lt;new&gt;</code></p><p>刪除指定名稱的遠端節點：<br><code>git remote remove &lt;name&gt;</code></p><h2 id="來源"><a class="header-anchor" href="#來源"></a>來源</h2><p><a href="https://gitbook.tw/chapters/github/push-to-github.html" target="_blank" rel="noopener">Git教學：如何 Push 上傳到 GitHub？</a><br><a href="https://stackoverflow.com/questions/5617211/what-is-git-remote-add-and-git-push-origin-master" target="_blank" rel="noopener">What is “git remote add …” and “git push origin master”?</a><br><a href="https://git-scm.com/docs/git-remote" target="_blank" rel="noopener">git Documentation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-remote-推上遠端伺服器&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#git-remote-推上遠端伺服器&quot;&gt;&lt;/a&gt;git remote 推上遠端伺服器&lt;/h1&gt;
&lt;p&gt;一個git專案建立完成，並有&lt;code&gt;git commi
      
    
    </summary>
    
    
      <category term="git實作筆記" scheme="https://diyunhung.github.io/categories/git%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="git" scheme="https://diyunhung.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>忍者 Chapter2. 在執行時期產生網頁</title>
    <link href="https://diyunhung.github.io/2020/05/25/20200525/20200525/"/>
    <id>https://diyunhung.github.io/2020/05/25/20200525/20200525/</id>
    <published>2020-05-25T13:37:45.000Z</published>
    <updated>2020-05-25T13:53:36.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="忍者-Chapter2-在執行時期產生網頁"><a class="header-anchor" href="#忍者-Chapter2-在執行時期產生網頁"></a>忍者 Chapter2. 在執行時期產生網頁</h1><h2 id="Web應用程式生命週期"><a class="header-anchor" href="#Web應用程式生命週期"></a>Web應用程式生命週期</h2><p>❗️ javascript如何適應這個生命週期</p><ul><li>瀏覽器能否用遠正確地根據HTML代碼產生出網頁？</li><li>一個Web應用程式可以同時處理多少事件？</li><li>為什麼瀏覽器必須使用事件佇列來處理多的事件？</li></ul><h3 id="生命週期概述"><a class="header-anchor" href="#生命週期概述"></a>生命週期概述</h3><p><mark>由頁面建立和事件處理兩的階段組成</mark></p><ol><li>開始於使用者輸入URL連結或點擊URL連結</li><li>瀏覽器發聲請求傳送到伺服器</li><li>伺服器處理請求並產生由HTML, CSS, JavaScript所組成的回應頁面</li><li>瀏覽器接收到這個回應頁面，便是Web應用程式開始有生命的一刻</li><li>事件處理，進入一個等待事件發生的迴圈 (6)</li><li>使用者與頁面元素互動(5)</li><li>使用者關閉頁面，網頁的生命週期結束</li></ol><h2 id="頁面建立階段"><a class="header-anchor" href="#頁面建立階段"></a>頁面建立階段</h2><p>透過</p><ol><li>解析HTML並建立文件物件模型(DOM)</li><li>執行Javascript程式</li></ol><p>瀏覽器根據需要，在這兩個步驟切換許多次</p><h3 id="解析HTML並建立DOM"><a class="header-anchor" href="#解析HTML並建立DOM"></a>解析HTML並建立DOM</h3><!-- ![](https://i.imgur.com/lOswouV.png) --><ul><li>一次處理一個HTML元素</li><li>一個節點可以有任何數量的子結點</li><li>相同父元素的子節點稱為兄弟元素</li><li>遇到特殊類型的HTML元素（如script），瀏覽器會值時停止由HTML代碼來建立DOM，而開始執行JavaScript</li></ul><p>DOM由HTML所建構，但兩者不相同。<br>HTML為建立最初的DOM所遵循的藍圖，瀏覽器會修復在藍圖中發現的問題並建立有效的DOM</p><div class="success"><p>HTML最新版本為HTML5<br><a href="https://html.spec.whatwg.org/" target="_blank" rel="noopener">規格</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noopener">Mozille</a></p><p>DOM為DOM3<br><a href="https://dom.spec.whatwg.org/" target="_blank" rel="noopener">規格</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener">Mozille</a></p></div><h3 id="執行JAVAScript程式碼"><a class="header-anchor" href="#執行JAVAScript程式碼"></a>執行JAVAScript程式碼</h3><p>script中所有的JavaScript由瀏覽器的JavaScipt引擎執行</p><table><thead><tr><th>瀏覽器</th><th>JavaScript引擎</th></tr></thead><tbody><tr><td>Firefox</td><td>Spidermonkey</td></tr><tr><td>Chrome、Opera</td><td>V8</td></tr><tr><td>Edge、IE</td><td>Chakra</td></tr></tbody></table><p>JS程式碼的主要目的為提供頁面的行為，瀏覽器藉由一個全域物件提供一組API，讓JS引擎與頁面互動並修改頁面</p><h4 id="JavaScript中的全域物件"><a class="header-anchor" href="#JavaScript中的全域物件"></a>JavaScript中的全域物件</h4><p>瀏覽器給JS引擎的主要全域物件是window物件，代表頁面所屬的瀏覽器視窗。<br>window是一個特殊的全域物件，可以透過它還存取所有其他的全域物件、全域變數及瀏覽器API。<br>window最重要的屬性是<code>document</code>，也就是目前頁面的DOM結構<br>JS可以任意改變頁面上的DOM結構。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.getElementById(<span class="string">'first'</span>)</span><br></pre></td></tr></table></figure><p>使用<code>document</code>全域物件從DOM結構找出ID為<code>first</code>的元素</p><h3 id="不同類型的JavaScript"><a class="header-anchor" href="#不同類型的JavaScript"></a>不同類型的JavaScript</h3><p>分為<mark>全域程式(Global code)</mark> 及 <mark>函式程式(function code)</mark><br>兩者主要的區別是它們所在的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//函式程式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMessage</span>(<span class="params">element, message</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> messageElement = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">messageElement.textContent = message;</span><br><span class="line">element.appendChild(messageElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全域程式</span></span><br><span class="line"><span class="keyword">var</span> first = <span class="built_in">document</span>.getElementById(<span class="string">"first"</span>);</span><br><span class="line">addMessage(first, <span class="string">"Page loading"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>全域程式會被JS引擎自動的逐行直接執行。<br>函式程式的執行必須由其他程式如全域程式、其他函式或由瀏覽器呼叫。</p><h3 id="在頁面建立階段執行JavaScript程式碼"><a class="header-anchor" href="#在頁面建立階段執行JavaScript程式碼"></a>在頁面建立階段執行JavaScript程式碼</h3><p>瀏覽器在頁面建立階段遇到<code>script</code>節點時會暫停使用HTML代碼來建立DOM結構，並開始執行JS程式碼。</p><!-- ![](https://i.imgur.com/SMHIDzs.png) --><p>JS可以任意的修改DOM結構：建立新節點、修改或刪除現有節點，但不能修改尚未建立的元素</p><div class="warning"><p>人們傾向把script放在頁面底部的原因之一，不必擔心特定的HTML元素有沒有被讀到</p></div><p>當執行完script中的最後一行code，瀏覽器並離開JS執行模式，並繼續處理HTML代碼來建立其他的DOM節點，並反覆的上述行為。</p><p>此時已執行過的script元素中，由使用者定義的全域變數能繼續被其他的script中元素的JS所存取ㄝ，因為存放了所有全域變數的window的全域物件，在頁面的整個生命週期內都是有效且可以存取的。</p><p>當瀏覽器處理完所有的HTML元素，頁面建立階段完成，並進入生命週期第二部分<mark>事件處理</mark></p><h2 id="事件處理"><a class="header-anchor" href="#事件處理"></a>事件處理</h2><p>在頁面建立階段，JS除了影響全域狀態及修改DOM結構外，還可以註冊事件監聽器（處理器），即在事件發生時要執行的函式。</p><h3 id="事件處理概述"><a class="header-anchor" href="#事件處理概述"></a>事件處理概述</h3><p>瀏覽器執行環境的核心為一次執行一段程式碼，為了避免大量阻塞，瀏覽器需要一種方法來追蹤<mark>已發生但尚未處理的事件</mark></p><p>所有已發生事件都會按照順序放置在同一個事件佇列中，交由瀏覽器檢測。</p><ul><li>瀏覽器檢查事件佇列的頂部</li><li>如果沒有事件，瀏覽器會持續檢查</li><li>如果有一事件，瀏覽器會存取他，並執行處理程式。執行期間，剩餘待處理事件間耐心等待直到被處理</li></ul><p>避免編寫需要大量執行時間的事件處理程式，會導致WEB無法產生回應</p><div class="info"><p>將事件放入事件佇列的瀏覽器工作機制，是在頁面建立和事件處理階段之外。判斷事件何時發生，並放入事件佇列的這些動作並不在處理事件的執行緒中</p></div><h3 id="事件是非同步的"><a class="header-anchor" href="#事件是非同步的"></a>事件是非同步的</h3><p>無法預測事件的發生的順序，因此事件的處理、對事件處理的函式呼叫是非同步的。</p><p>可能會發生的事件</p><ul><li>瀏覽器事件，如頁面處於以載入會未載入的狀態</li><li>網路事件，如來自伺服器的回應Ajax事件、伺服器端事件）</li><li>使用者事件，如點擊滑鼠、移動滑鼠、按下鍵盤</li><li>計時器事件，如等候逾時或間隔性的觸發條件</li></ul><p>程式碼是在事前完成設置，以便在之後執行。<br>除了全域程式，在頁面上大多的程式都是某些事件的結果而被執行。</p><h3 id="註冊事件處置器"><a class="header-anchor" href="#註冊事件處置器"></a>註冊事件處置器</h3><p>Event-handler registration, 事件處置器是在特定的事件時發生執行的函式。<br>有兩種註冊事件方式：</p><ul><li>將函式指定給特殊屬性</li><li>使用內建的addEventListener方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//針對load事件註冊一個事件處理器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//對document主體的click事件註冊一個事件處理器</span></span><br></pre></td></tr></table></figure><p>不建議使用以上方式，缺點是某一特定事件只能指派一個事件處理器，很容易蓋掉之前的事件處理函式。</p><p>一個好的替代方式<code>addEventListener</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"mousemove"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> second = <span class="built_in">document</span>.getElementById(<span class="string">"second"</span>);</span><br><span class="line">addMessage(second, <span class="string">"Event: mousemove"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> second = <span class="built_in">document</span>.getElementById(<span class="string">"second"</span>);</span><br><span class="line">addMessage(second, <span class="string">"Event: click"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="處理事件"><a class="header-anchor" href="#處理事件"></a>處理事件</h3><p>事件處理的主要概念適當事件發生時，瀏覽器呼叫相關的事件處理器。</p><p>模擬情境</p><ol><li>當頁面建置完成使用者開始移動滑鼠即點擊滑鼠</li><li>瀏覽器依順序加入將mousemove和click事件放置到事件佇列上</li><li>事件處理階段：佇列頂端有一個mousemove事件，並執行相關事件處理器，此時click事件等待中</li><li>mousemove最後一行執行完畢，並且JS引擎退出該事件函式，mousemove事件處理完成</li><li>事件迴圈再次檢查佇列，找到click事件並執行</li><li>（重複動作直到使用者關閉Web）</li></ol><h2 id="總結"><a class="header-anchor" href="#總結"></a>總結</h2><ul><li>瀏覽器接收HTML代碼作為建立DOM結構的藍圖，而DOM就是客戶端WEB的的結構表現</li><li>我們透過Javascript程式動態的修改DOM結構，以便為WEB展現動態行為</li><li>客戶端的WEB執行分為兩個階段：<ul><li>頁面建立：處理HTML以建立DOM結構，遇到<code>&lt;script&gt;</code>執行全域程式，執行時可修改DOM結構，及註冊事件處理器(addEventListener)</li><li>事件處理：按照事件產生的順序逐一執行，仰賴事件佇列，事件按照他們的發生的順序被儲存起來。事件回圈會一直檢查事件佇列是否有事件，如果有，呼叫執行函式</li></ul></li></ul><h2 id="名詞解釋"><a class="header-anchor" href="#名詞解釋"></a>名詞解釋</h2><ul><li>DOM(Document Object Model)文件物件模型：<br>客戶端Web使用者介面的結構化表示，只少一開始，他是由Web中的HTML代碼所構成</li><li>事件：<br>絕大多數的JS代碼都是事件驅動的應用程式，意味著程式碼都是為了回應特定事件而執行，事件包含網路事件、計時器、使用者事件</li><li>瀏覽器API:<br>瀏覽器提供了一組API，允許我們存取設備資訊、在本地端存取資料或與遠端伺服器通訊</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;忍者-Chapter2-在執行時期產生網頁&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#忍者-Chapter2-在執行時期產生網頁&quot;&gt;&lt;/a&gt;忍者 Chapter2. 在執行時期產生網頁&lt;/h1&gt;
&lt;h2 id=&quot;Web應用程式生命週期&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="JS新手村" scheme="https://diyunhung.github.io/categories/JS%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="javascript" scheme="https://diyunhung.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Destructuring assignment 解構賦值</title>
    <link href="https://diyunhung.github.io/2020/05/22/20200522/"/>
    <id>https://diyunhung.github.io/2020/05/22/20200522/</id>
    <published>2020-05-22T07:31:52.000Z</published>
    <updated>2020-06-06T07:46:33.503Z</updated>
    
    <content type="html"><![CDATA[<p>解構賦值 (Destructuring assignment)<br>可以把陣列或物件中的資料解開擷取成為獨立變數。</p><blockquote><p>用於提取(extract)陣列或物件中的資料，新語法可以讓程式碼在撰寫時更為簡短與提高閱讀性。<br><a href="https://ithelp.ithome.com.tw/articles/10185430" target="_blank" rel="noopener">Day 08: ES6篇 - Destructuring Assignment(解構賦值)</a></p></blockquote><blockquote><p>解構賦值可以想像是鏡子的概念，將右方的資料往左邊送，然後會一個位置對一個值 (但沒有像鏡子左右顛倒)。<br><a href="https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/" target="_blank" rel="noopener">卡斯伯-鐵人賽：ES6 解構賦值</a></p></blockquote><p><mark>語法</mark></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字串-拆成一個一個字元</span></span><br><span class="line"><span class="keyword">const</span> ddhung = <span class="string">'iscute'</span>;</span><br><span class="line">[a,b,c,d,e] = ddhung;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//陣列</span></span><br><span class="line"><span class="keyword">let</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">[a, b, ...rest] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest) <span class="comment">//[30, 40, 50]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果左方多於右方會出現undefined</span></span><br><span class="line"><span class="keyword">const</span> family = [<span class="string">'Robert'</span>, <span class="string">'Grace'</span>, <span class="string">'DD'</span>];</span><br><span class="line"><span class="keyword">const</span> [dad, mon, baby, dog] = family;</span><br><span class="line"><span class="built_in">console</span>.log(baby, dog) <span class="comment">// DD undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//物件</span></span><br><span class="line">(&#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">(&#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure><p>解構順序依左至右</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> [x, y] = a</span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(y) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="陣列解構"><a class="header-anchor" href="#陣列解構"></a>陣列解構</h2><p>陣列以順序的索引值對應</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">const</span> [red, yellow, green] = foo;</span><br><span class="line"><span class="built_in">console</span>.log(red); <span class="comment">// "one"</span></span><br><span class="line"><span class="built_in">console</span>.log(yellow); <span class="comment">// "two"</span></span><br><span class="line"><span class="built_in">console</span>.log(green); <span class="comment">// "three"</span></span><br></pre></td></tr></table></figure><p><mark>預設值</mark><br>當解構還原陣列對應的元素是<code>undefined</code>，變數為預設值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a , b;</span><br><span class="line">[a = <span class="number">5</span>, b = <span class="number">10</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p><mark>變數交換</mark>👍<br>兩個變數可以透過一個解構指派式交換</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">[arr[<span class="number">2</span>], arr[<span class="number">1</span>]] = [arr[<span class="number">1</span>], arr[<span class="number">2</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 3, 2]</span></span><br></pre></td></tr></table></figure><p><mark>解析自函式回傳的陣列</mark><br>函式可以回傳陣列，而解構指派示可以讓回傳值更簡潔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a, b;</span><br><span class="line">[a, b] = f()</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><mark>忽略回傳值</mark></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, , b] = f();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="物件解構"><a class="header-anchor" href="#物件解構"></a>物件解構</h2><p>物件以物件的屬性名稱（key）做對應，沒有順序性<br><mark>基本指派示</mark></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const o &#x3D; &#123;p: 42, q: true&#125;;</span><br><span class="line">const &#123;p, q&#125; &#x3D; o;</span><br><span class="line">console.log(p) &#x2F;&#x2F;42</span><br><span class="line">console.log(q) &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><div class="info"><p>就目前解讀為什麼要這樣做(一)？<br>如果沒有<code>const {p, q} = o;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(p) &#x2F;&#x2F;p is not defined&#96;</span><br><span class="line">console.log(o.p) &#x2F;&#x2F;42</span><br></pre></td></tr></table></figure><p>透過解構賦值後，可以直接透過物件的key取到value</p><p>為什麼要這樣做（二）?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const o &#x3D; &#123;p: 42, q: true&#125;;</span><br><span class="line">&#x2F;&#x2F;一般寫法</span><br><span class="line">let p &#x3D; o.p</span><br><span class="line">let q &#x3D; o.q</span><br><span class="line">&#x2F;&#x2F;解構賦值寫法</span><br><span class="line">const &#123;p, q&#125; &#x3D; o; &#x2F;&#x2F;結束！</span><br></pre></td></tr></table></figure></div><p><mark>無宣告指派</mark></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a, b;</span><br><span class="line">(&#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span> , <span class="attr">b</span>: <span class="number">2</span>&#125;); <span class="comment">//此段同const &#123;a, b &#125; = &#123;a: 1 , b: 2&#125;，結尾分號為必須</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//1</span></span><br></pre></td></tr></table></figure><div class="danger"><p>⚠️ 針對物件解構時，指派示必須加上()<br><code>{a, b} = {a: 1 , b: 2}</code> 左邊的{a,b}會被視為程式碼區塊而非物件</p></div><p><mark>預設值</mark><br>當解構物件中對應的值為<code>undefined</code>時，變數可以設定預設值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;a = <span class="number">10</span>, b = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="attr">a</span>: aa = <span class="number">10</span>, <span class="attr">b</span>: bb = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(bb); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><mark>當函數的parameter為物件時</mark></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userDD = &#123;<span class="attr">id</span>: <span class="number">42</span>, <span class="attr">displayName</span>: <span class="string">'DD'</span>, <span class="attr">fullName</span>:&#123;<span class="attr">firstName</span>: <span class="string">'Hung'</span>,<span class="attr">lastName</span>: <span class="string">'Di'</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">userId</span>(<span class="params">&#123;id&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whois</span>(<span class="params">&#123;displayName, fullName:&#123;firstName: name&#125;&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;displayName&#125;</span> is <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(userId(userDD)) <span class="comment">//42</span></span><br><span class="line"><span class="built_in">console</span>.log(whois(userDD)) <span class="comment">//DD is Hung</span></span><br></pre></td></tr></table></figure><p>從物件中提出的<code>id</code>, <code>displayName</code> 和<code>firstName</code> 並印出</p><p><mark>設定函式parameter為物件，且有預設值</mark></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawChart</span>(<span class="params">&#123;size = <span class="string">'big'</span>,coords = &#123;x: <span class="number">0</span>, y: <span class="number">0</span>&#125;,radius = <span class="number">25</span>&#125;=&#123;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(size, coords, radius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawChart(&#123;</span><br><span class="line">    coords:&#123;<span class="attr">x</span>: <span class="number">18</span>, <span class="attr">y</span>: <span class="number">30</span>&#125;,<span class="attr">radius</span>:<span class="number">30</span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">//big &#123;x: 18, y: 30&#125; 30</span></span><br></pre></td></tr></table></figure><div class="danger"><p>⚠️ drawChart的parameter中，左方的解構式被指派到一個空物件，<br><code>{size = 'big', coords = {x: 0, y: 0}, radius = 25} = {}</code><br>如果沒有寫右方的指派式，函式在呼叫時會找出最少一個參數。指派到空物件的作法，可以直接不使用參數呼叫drawChart();</p></div><h2 id="範例"><a class="header-anchor" href="#範例"></a>範例</h2><p><mark>循環取出的解構</mark></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [&#123;<span class="attr">name</span>: <span class="string">'Mike Smith'</span>,<span class="attr">family</span>:&#123;<span class="attr">mother</span>: <span class="string">'Sally'</span>, <span class="attr">father</span>: <span class="string">'Joey Smith'</span>&#125;,<span class="attr">age</span>: <span class="number">35</span>&#125;,</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">'DD Hung'</span>, <span class="attr">family</span>:&#123;<span class="attr">mother</span>: <span class="string">'Grace'</span>, <span class="attr">father</span>: <span class="string">'Robert Hung'</span>&#125;, <span class="attr">age</span>: <span class="number">22</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> &#123;<span class="attr">name</span>: n , <span class="attr">family</span>: &#123;<span class="attr">father</span>: f&#125;&#125; <span class="keyword">of</span> people)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Name: '</span>+n+<span class="string">' Father: '</span>+f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Name: Mike Smith Father: Joey Smith</span></span><br><span class="line"><span class="comment">//Name: DD Hung Father: Robert Hung</span></span><br></pre></td></tr></table></figure><p><mark>題目</mark><br>宣告兩個具有5個元素的整數陣列 <code>arr1</code> 和 <code>arr2</code> ，並利用陣列設定初值的方式，將 <code>arr1[0] ~ arr1[4]</code> 分別設值為 2, 3, 1, 7, 9， <code>arr2[0] ~ arr2[4]</code> 分別設值為 8, 7, 9, 3, 1，將 arr1 與 arr2 兩陣列對應項相加，列印出相加後的陣列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js09.js 介面</span></span><br><span class="line"><span class="keyword">const</span> &#123; main &#125; = <span class="built_in">require</span>(<span class="string">"./js09_module"</span>);</span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> result = main(arr1,arr2);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[10, 10, 10, 10, 10]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js09_module 程式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumValue</span>(<span class="params">inputArray</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> length = inputArray.arr1.length;</span><br><span class="line">  <span class="keyword">let</span> newArray = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    newArray[i] = inputArray.arr1[i] + inputArray.arr2[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">array1, array2</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> sumValue(&#123;array1, array2&#125;);<span class="comment">//解構賦值 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123; main &#125;;</span><br></pre></td></tr></table></figure><p><mark>解釋</mark></p><p>js09_module中第12行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sumValue(&#123;arr1,arr2&#125;) &#x2F;&#x2F;為sumValue(&#123;array1:array1, array2:array2:&#125;)的簡寫</span><br></pre></td></tr></table></figure><p>將<code>function sumValue(inputArray)</code>帶入參數<code>{array1, array2}</code></p><p>在第3行中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const length &#x3D; inputArray.arr1.length;</span><br></pre></td></tr></table></figure><p>相當於以下語法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const length &#x3D; &#123;array1: array1&#x3D; [2, 3, 1, 7, 9], array2: array2&#x3D; [8, 7, 9, 3, 1]&#125;.array1.length;</span><br></pre></td></tr></table></figure><p>下面的語法就以此類推啦～</p><p>換一個比較短的例子會比較好理解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; [1, 2, 3];</span><br><span class="line">const b &#x3D; [4, 5, 6];</span><br><span class="line">const c &#x3D; &#123;a, b&#125;;</span><br><span class="line">console.log(c); &#x2F;&#x2F;&#123;[1, 2, 3], [4, 5, 6]&#125;</span><br><span class="line">console.log(c.a); &#x2F;&#x2F; [1, 2, 3]</span><br><span class="line">console.log(c.a.length); &#x2F;&#x2F;3</span><br></pre></td></tr></table></figure><h2 id="參考"><a class="header-anchor" href="#參考"></a>參考</h2><blockquote><p><a href="https://ithelp.ithome.com.tw/articles/10185430" target="_blank" rel="noopener">Day 08: ES6篇 - Destructuring Assignment(解構賦值)</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">MDN - Destructuring assignment</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;解構賦值 (Destructuring assignment)&lt;br&gt;
可以把陣列或物件中的資料解開擷取成為獨立變數。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用於提取(extract)陣列或物件中的資料，新語法可以讓程式碼在撰寫時更為簡短與提高閱讀性。&lt;br&gt;
&lt;a hr
      
    
    </summary>
    
    
      <category term="JS新手村" scheme="https://diyunhung.github.io/categories/JS%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="javascript" scheme="https://diyunhung.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>二維陣列應用題：陣列旋轉</title>
    <link href="https://diyunhung.github.io/2020/05/16/20200516/"/>
    <id>https://diyunhung.github.io/2020/05/16/20200516/</id>
    <published>2020-05-16T09:06:08.000Z</published>
    <updated>2020-05-23T03:47:01.606Z</updated>
    
    <content type="html"><![CDATA[<p>二維陣列簡單理解為一個陣列中的值有陣列型態<br>簡單的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const array &#x3D; [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">console.log(array[0][1])  &#x2F;&#x2F;2</span><br><span class="line">console.log(array[2][2])  &#x2F;&#x2F;9</span><br></pre></td></tr></table></figure><p>可以應用在一個有趣的試題</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">將 </span><br><span class="line">1,2,3</span><br><span class="line">4,5,6</span><br><span class="line">7,8,9</span><br><span class="line"></span><br><span class="line">旋轉90度</span><br><span class="line">7,4,1</span><br><span class="line">8,5,2</span><br><span class="line">9,6,3</span><br></pre></td></tr></table></figure><h3 id="方法一：陣列轉置後再倒轉（reverse）"><a class="header-anchor" href="#方法一：陣列轉置後再倒轉（reverse）"></a>方法一：陣列轉置後再倒轉（reverse）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const array &#x3D; [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">const newArray &#x3D; [];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;進行轉置</span><br><span class="line">for(let i &#x3D; 0; i&lt;array[0].length ; i++)&#123;</span><br><span class="line">    newArray[i]&#x3D;[];</span><br><span class="line">        for(let j &#x3D; 0 ; j&lt;array.length ; j++)&#123;</span><br><span class="line">            newArray[i][j]&#x3D;array[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(newArray) </span><br><span class="line">&#x2F;&#x2F; [[1,4,7],</span><br><span class="line">&#x2F;&#x2F;  [2,5,8],</span><br><span class="line">&#x2F;&#x2F;  [3,6,9]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;再倒轉</span><br><span class="line">for(let i &#x3D;0;i&lt;newArray.length; i++)&#123;</span><br><span class="line">    newArray[i].reverse();</span><br><span class="line">&#125;</span><br><span class="line">console.log(newArray)</span><br><span class="line">&#x2F;&#x2F; [7,4,1]</span><br><span class="line">&#x2F;&#x2F; [8,5,2]</span><br><span class="line">&#x2F;&#x2F; [9,6,3]</span><br></pre></td></tr></table></figure><h4 id="思路"><a class="header-anchor" href="#思路"></a>思路</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;原本的array</span><br><span class="line">[1,2,3]</span><br><span class="line">[4,5,6]</span><br><span class="line">[7,8,9]</span><br></pre></td></tr></table></figure><p>先將陣列轉置為：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;newArray</span><br><span class="line">[1,4,7]</span><br><span class="line">[2,5,8]</span><br><span class="line">[3,6,9]</span><br></pre></td></tr></table></figure><h4 id="轉置的步驟拆解："><a class="header-anchor" href="#轉置的步驟拆解："></a>轉置的步驟拆解：</h4><p>觀察<code>newarray</code>的<strong>第[0]列</strong>中<strong>值</strong>的順序就是<code>array</code>的每<strong>列</strong>中的<strong>第[0]的值</strong><br>第[0]列中有幾個值，等於迴圈要跑幾次(第[0]列的長度)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(let i&#x3D;0 ; i&lt;array[0].length; i++)</span><br></pre></td></tr></table></figure><p>此時<code>i</code>從0開始，<br>定義<code>newArray</code>的第[0]列中的值為陣列型態</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newArray[i] &#x3D; [];</span><br></pre></td></tr></table></figure><p>開始為<code>newArray</code><strong>第[0]列</strong>賦值<br><code>array</code>本身陣列中有幾個值，等於迴圈要跑幾次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let j&#x3D;0 ; j&lt;array.length ; j++ )&#123;</span><br><span class="line">    newArray[i][j] &#x3D; array[j][i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;組合</span><br><span class="line">for(let i &#x3D; 0; i&lt;array[0].length ; i++)&#123;</span><br><span class="line">    newArray[i]&#x3D;[];</span><br><span class="line">        for(let j &#x3D; 0 ; j&lt;array.length ; j++)&#123;</span><br><span class="line">            newArray[i][j]&#x3D;array[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//依執行步驟演示一次,<code>i</code>,<code>j</code>直接以數字表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;array[0].length &#x3D; 3;</span><br><span class="line">&#x2F;&#x2F;array.length &#x3D; 3;</span><br><span class="line">for(let i &#x3D; 0 ; i&lt;3 ; i++)&#123;</span><br><span class="line">    newArray[0] &#x3D; [];</span><br><span class="line">        for(let j&#x3D;0 ; j&lt;3 ; j++ )&#123;</span><br><span class="line">            newArray[0][0] &#x3D; array[0][0]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;繼續...</span><br><span class="line">&#x2F;&#x2F;i &#x3D; 0 , j &#x3D; 0+1 &#x3D; 1</span><br><span class="line">newArray[0][1] &#x3D; array[1][0];</span><br><span class="line">&#x2F;&#x2F;i &#x3D; 0 , j &#x3D; 1+1 &#x3D; 2</span><br><span class="line">newArray[0][2] &#x3D; array[2][0]; </span><br><span class="line">&#x2F;&#x2F;i &#x3D; 0 , j &#x3D; 2+1 &#x3D; 3 ; 3&lt;3為false，j迴圈結束，i迴圈執行i++</span><br><span class="line">&#x2F;&#x2F;i &#x3D; 0+1 &#x3D; 1 , j &#x3D; 0</span><br><span class="line">newArray[1][0] &#x3D; array[0][1];</span><br><span class="line">&#x2F;&#x2F;i &#x3D; 0+1 &#x3D; 1 , j &#x3D; 0 + 1 &#x3D; 1</span><br><span class="line">newArray[1][1] &#x3D; array[1][1];</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#x2F;&#x2F;i &#x3D; 2 , j &#x3D; 1</span><br><span class="line">newArray[2][1] &#x3D; array[1][2];</span><br><span class="line">&#x2F;&#x2F;i &#x3D; 2 , j &#x3D; 2</span><br><span class="line">newArray[2][2] &#x3D; array[2][2];</span><br><span class="line">&#x2F;&#x2F;-------</span><br><span class="line">&#x2F;&#x2F;轉置完成，喜獲newArray</span><br><span class="line">&#x2F;&#x2F;[1,4,7]</span><br><span class="line">&#x2F;&#x2F;[2,5,8]</span><br><span class="line">&#x2F;&#x2F;[3,6,9]</span><br></pre></td></tr></table></figure><p>再用reverse掉換順序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(let i &#x3D;0;i&lt;newArray.length; i++)&#123;</span><br><span class="line">    newArray[i].reverse();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;調換完成，newArray再次變身</span><br><span class="line">&#x2F;&#x2F;[7,4,1]</span><br><span class="line">&#x2F;&#x2F;[8,5,2]</span><br><span class="line">&#x2F;&#x2F;[9,6,3]</span><br></pre></td></tr></table></figure><p>DD後記：<br>沒有發現向右轉90度的呈現會和<strong>轉置再調換</strong>的一樣，其實一開始想的是方法二</p><h3 id="方法二"><a class="header-anchor" href="#方法二"></a>方法二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array &#x3D; </span><br><span class="line">[[1,2,3],</span><br><span class="line">[4,5,6],</span><br><span class="line">[7,8,9]]</span><br><span class="line">&#x2F;&#x2F;向右轉90度變成</span><br><span class="line">newArray &#x3D;</span><br><span class="line">[[7,4,1],</span><br><span class="line">[8,5,2],</span><br><span class="line">[9,6,3]]</span><br></pre></td></tr></table></figure><p>觀察array及要轉90度的newArray的規律</p><p>newArray裡的第[0]組陣列<br>newArray[0][0] = array[2][0]<br>newArray[0][1] = array[1][0]<br>newArray[0][2] = array[0][0]</p><p>newArray裡的第[1]組陣列（<br>newArray[1][0] = array[2][1]<br>newArray[1][1] = array[1][1]<br>newArray[1][2] = array[0][1]</p><p>newArray裡的第[2]組陣列<br>newArray[2][0] = array[2][2]<br>newArray[2][1] = array[1][2]<br>newArray[2][2] = array[0][2]</p><p>懶人包說明：<br><code>newArray</code>第[0]列裡的值，等於<code>array</code>第[2][1][0]列中第[0]個值<br><code>newArray</code>第[1]列裡的值，等於<code>array</code>第[2][1][0]列中第[1]個值<br><code>newArray</code>第[2]列裡的值，等於<code>array</code>第[2][1][0]列中第[2]個值</p><p><s>有比較好嗎？</s></p><p>先以i, j分別替代值，會發現有這樣的規律：<br>newArray[ i ][ j ] = array[array.lenth -1 - j ][ i ]<br><code>[arrary.lenth -1 - j]</code>會有點不直觀，必須一直找規律</p><p>其他迴圈跑的方式和<strong>方法一</strong>一樣，差別在不用再<code>reverse()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var array &#x3D; [[1, 2, 3], [4, 5, 6], [7, 8, 9]];</span><br><span class="line">const newArray &#x3D; [];</span><br><span class="line">var len &#x3D; array.length;</span><br><span class="line"></span><br><span class="line">for (let i &#x3D; 0; i &lt; array[0].length; i++) &#123;</span><br><span class="line">  newArray[i] &#x3D; [];</span><br><span class="line">  for (let j &#x3D; 0; j &lt; array.length; j++) &#123;</span><br><span class="line">    newArray[i][j] &#x3D; array[len - 1 - j][i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(newArray)</span><br><span class="line">&#x2F;&#x2F;[7,4,1]</span><br><span class="line">&#x2F;&#x2F;[8,5,2]</span><br><span class="line">&#x2F;&#x2F;[9,6,3]</span><br><span class="line">&#x2F;&#x2F;完成任務！！</span><br></pre></td></tr></table></figure><h2 id="備註"><a class="header-anchor" href="#備註"></a>備註</h2><ol><li>console.log出來會是一整列呈現，在此不多討論如何換行</li><li>對<code>[arrary.lenth -1 - j]</code>有好的解釋歡迎告訴我～</li></ol><h2 id="參考"><a class="header-anchor" href="#參考"></a>參考</h2><p><a href="https://www.itread01.com/content/1542810303.html" target="_blank" rel="noopener">【JS】轉置矩陣 #陣列</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二維陣列簡單理解為一個陣列中的值有陣列型態&lt;br&gt;
簡單的例子&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="JS新手村" scheme="https://diyunhung.github.io/categories/JS%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="javascript" scheme="https://diyunhung.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>新屋落成</title>
    <link href="https://diyunhung.github.io/2020/05/16/20200516-2/"/>
    <id>https://diyunhung.github.io/2020/05/16/20200516-2/</id>
    <published>2020-05-16T08:17:13.000Z</published>
    <updated>2020-05-22T07:33:23.147Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>「你在這個星球上的體驗應該是愉悅的，你必須幸福地生活然後離去。」</p></blockquote><p>&lt;非常日記&gt;取自大學時的選修的課&lt;創意思考&gt;中，教授指定的課題，</p><p>非常，不如往常的。</p><p>必須每天紀錄一件過往的自己不會去做的事情，像是打破自己的常規。</p><p>後來體認到其實每天都是如此的&lt;非-常&gt;。</p><p>2020年更是值得紀錄的一年，</p><p>即使還不夠勇敢，但仍必須為自己來點喝采，共勉之。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;「你在這個星球上的體驗應該是愉悅的，你必須幸福地生活然後離去。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;非常日記&amp;gt;取自大學時的選修的課&amp;lt;創意思考&amp;gt;中，教授指定的課題，&lt;/p&gt;
&lt;p&gt;非常，不如往常的。&lt;/p&gt;
&lt;p&gt;必須
      
    
    </summary>
    
    
      <category term="雜談" scheme="https://diyunhung.github.io/categories/%E9%9B%9C%E8%AB%87/"/>
    
    
      <category term="begin" scheme="https://diyunhung.github.io/tags/begin/"/>
    
  </entry>
  
  <entry>
    <title>初探JS</title>
    <link href="https://diyunhung.github.io/2020/04/21/20200412/"/>
    <id>https://diyunhung.github.io/2020/04/21/20200412/</id>
    <published>2020-04-21T09:00:00.000Z</published>
    <updated>2020-05-23T03:47:39.500Z</updated>
    
    <content type="html"><![CDATA[<p>此篇是從0開始的JS新手，以閱讀<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="noopener">MDN</a>上的javascript開始</p><h3 id="什麼是JavaScript"><a class="header-anchor" href="#什麼是JavaScript"></a>什麼是JavaScript</h3><p>跨平台、物件導向。<br>dynamically typed language（動態型別語言）</p><h3 id="使用“use-strict”做嚴謹的開發"><a class="header-anchor" href="#使用“use-strict”做嚴謹的開發"></a>使用“use strict”做嚴謹的開發</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line">    </span><br><span class="line">    function greetMe(yourName)&#123;</span><br><span class="line">        alert(&#39;Hello&#39;+ yourName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    greetMe(&#39;world&#39;);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>在每段程式碼前加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;&quot;use strict&quot;;</span><br></pre></td></tr></table></figure><p>在每段程式碼後加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>這樣做可以</p><ol><li>大幅度地提升性能</li><li>預防愚蠢的語意阻礙初心者 //很直白的說明</li><li>Prevent code snippets executed in the console from interacting with one-another (e.g., having something created in one console execution being used for a different console execution). （預防重複執行同一片段？）</li></ol><p>也可以對單一function內寫‘use strict’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">  &#39;use strict&#39;;</span><br><span class="line">  dd &#x3D; &#39;xinxingKnightly&#39;;</span><br><span class="line">  &#x2F;&#x2F; Uncaught ReferenceError: auntie is not defined</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>需要放在函式的開頭才有作用</li></ul><blockquote><p>卡斯伯-JavaScript 的嚴格模式 “use strict”<br><a href="https://wcc723.github.io/javascript/2017/12/15/javascript-use-strict/" target="_blank" rel="noopener">https://wcc723.github.io/javascript/2017/12/15/javascript-use-strict/</a></p></blockquote><h2 id="基礎知識"><a class="header-anchor" href="#基礎知識"></a>基礎知識</h2><ul><li>JS語法借鑑於JAVA, C, C++,也被Awk, Perl, Python影響</li><li>Case-sensitive，區分大小寫，試大小寫為不同的值</li><li>使用Unicode符號皆可被使用</li><li>每行指令稱為“statements”，並使用分號（semicolons）隔開</li><li>若只有一行指令，分號非必須。但有超過一行的指令，就必須使用分號隔開</li><li>JS腳本由左往右掃描，並轉換成sequence of input elements像令牌（Token）、控制字符（Control characters）、換行器（line terminators）、註解（Comments）或是空白（Withespace）</li></ul><h2 id="Comments-註解"><a class="header-anchor" href="#Comments-註解"></a>Comments 註解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; a one line comment</span><br><span class="line"> </span><br><span class="line">&#x2F;* this is a longer, </span><br><span class="line"> * multi-line comment</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><ul><li><code>#!/usr/bin/env node.</code> 稱作 hashbang comment，標註應執行的JS引擎路徑</li></ul><h2 id="Declarations-宣告"><a class="header-anchor" href="#Declarations-宣告"></a>Declarations 宣告</h2><p>JavaScipt有三種宣告方式：</p><p><code>var</code><br>宣告一個可任意給予一個初始值的變數</p><p><code>let</code><br>宣告一個在Block-scoped(範圍)、local variable(本地變數),可任意給予一個初始值的變數</p><p><code>const</code><br>宣告一個在Block-scoped(區塊範圍),read-only named constant(唯讀的常數)，不能重新賦值</p><ul><li>&quot;=&quot;為賦值的動作</li><li>有宣告行為但沒有賦值，該變數為undefined</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var car;</span><br><span class="line">console.log(car);</span><br><span class="line">&#x2F;&#x2F;print undefined</span><br></pre></td></tr></table></figure><h3 id="Variables-變數"><a class="header-anchor" href="#Variables-變數"></a>Variables 變數</h3><ul><li>使用語意化的命名</li><li>開頭為letter(字母)、underscore(＿)、dollar sign($)，接續的字符可為數字</li><li>大小寫區分，視為不同值</li><li>不能取JS中的保留字</li><li>駝峰式<code>var carType = nissan</code>，下底線式<code>var car_type = nissan</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a1 &#x3D; &quot;lowerCase&quot;;</span><br><span class="line">var A1 &#x3D; &quot;upperCase&quot;;</span><br><span class="line">console.log(a1,A1);</span><br><span class="line">&#x2F;&#x2F;print&gt; lowerCase upperCase</span><br></pre></td></tr></table></figure><h3 id="Declaring-Variables-宣告變數"><a class="header-anchor" href="#Declaring-Variables-宣告變數"></a>Declaring Variables 宣告變數</h3><p>兩種方法：</p><ul><li><p><code>var</code><br><code>var x = 42</code><br>宣告一個可用於local及global變數，取決於execution context（執行的上下文）</p></li><li><p><code>const</code> or <code>let</code><br><code>ley y = 13</code><br>宣告一個block-scope local variable.(區塊裡的區域變數)</p></li><li><p>不鼓勵的宣告(當作不是一種方式)<br><code>x = 87</code><br>創造一個undeclared global variable。JS也會提出警示</p></li></ul><h3 id="Evaluating-variables-變數取值"><a class="header-anchor" href="#Evaluating-variables-變數取值"></a>Evaluating variables 變數取值</h3><h4 id="Undefine-及-ReferenceError"><a class="header-anchor" href="#Undefine-及-ReferenceError"></a>Undefine 及 ReferenceError</h4><p>如果宣告一個變數時沒有“賦值”，此變數的值為“undefined”<br>如果要取得一個沒有宣告的變數，有跳出“ReferenceError”</p><p><img src="https://i.imgur.com/bBvemEq.png" alt></p><p>Tips:可以利用判斷變數的值是否為undefined來執行程式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var input;</span><br><span class="line">if (input &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">    doThis(); &#x2F;&#x2F;此時If為true</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    doThat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>undefined在布林判斷下為“false”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var myArray &#x3D; [];</span><br><span class="line">if (!myArray[0]) </span><br><span class="line">myFunction(); </span><br><span class="line">&#x2F;&#x2F;會執行Myfunction</span><br></pre></td></tr></table></figure><ul><li>undefined在數字運算上會判斷為NaN(Not a Number)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">a + 2 &#x2F;&#x2F;Evaluates to NaN</span><br></pre></td></tr></table></figure><h4 id="Null"><a class="header-anchor" href="#Null"></a>Null</h4><p>如果宣告一個變數為null <code>var a = null</code><br>null在運算上為0,布林判斷為false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var n &#x3D; null</span><br><span class="line">console.log(n * 32);  &#x2F;&#x2F; print 0</span><br></pre></td></tr></table></figure><h4 id="及-–-運算子"><a class="header-anchor" href="#及-–-運算子"></a>++及 – 運算子</h4><p><code>a=a+1</code> = <code>a+=1</code> = <code>a++</code><br>!注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 0;</span><br><span class="line">console.log(a++ &amp;&amp; 30);  &#x2F;&#x2F;print 0</span><br></pre></td></tr></table></figure><p>因為會判斷為：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a &amp;&amp; 30); &#x2F;&#x2F;print 0</span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>若改寫</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(++a &amp;&amp; 30) &#x2F;&#x2F;print 30</span><br></pre></td></tr></table></figure><p><code>a=a-1</code> = <code>a-=1</code> = <code>a--</code></p><h3 id="Varialble-scope-變數區塊-變數範圍"><a class="header-anchor" href="#Varialble-scope-變數區塊-變數範圍"></a>Varialble scope 變數區塊 / 變數範圍</h3><h4 id="Global-variable-全域變數"><a class="header-anchor" href="#Global-variable-全域變數"></a>Global variable 全域變數</h4><p>在function外宣告的變數，當前文件的code皆可以使用 <code>var</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">    var x &#x3D; 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(x)   &#x2F;&#x2F;print 5</span><br></pre></td></tr></table></figure><h4 id="Local-variable-區域變數"><a class="header-anchor" href="#Local-variable-區域變數"></a>Local variable 區域變數</h4><p>在function內宣告的變數，此能在該function內使用 <code>let</code> <code>const</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">    let y &#x3D; 10;</span><br><span class="line">&#125;</span><br><span class="line">console.log(y) &#x2F;&#x2F; print &quot;ReferenceError: y is not defined&quot;</span><br></pre></td></tr></table></figure><h3 id="Variable-hoisting-變數提升"><a class="header-anchor" href="#Variable-hoisting-變數提升"></a>Variable hoisting 變數提升</h3><p>JS有別於一個般的概念“Hoisting”，可以讓“Variables(變數)”不一定要在程式最前方,<br>但被提升的已賦值變數的值為“undefined”</p><ul><li>讓宣告變數寫在要使用的function上方．讓code更易讀</li><li>僅以<code>var</code>宣告的變數在hoisting後其值為undefined</li><li><code>let</code>及<code>const</code>宣告的變數無法被hoisting，會被判斷“ReferenceError”，會在ES6上定義的Temporal Dead Zone（TDZ暫時死亡區域）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(x);</span><br><span class="line">let x &#x3D;1;  &#x2F;&#x2F;Uncaught ReferenceError: x is not defined</span><br></pre></td></tr></table></figure><h3 id="補充資料"><a class="header-anchor" href="#補充資料"></a>(補充資料)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof a; &#x2F;&#x2F; undefined</span><br><span class="line">typeof b; &#x2F;&#x2F; ReferenceError! (TDZ)</span><br><span class="line">let b;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://cythilya.github.io/2018/11/05/syntax/" target="_blank" rel="noopener">https://cythilya.github.io/2018/11/05/syntax/</a></p></blockquote><h3 id="Function-hoisting-函式提升"><a class="header-anchor" href="#Function-hoisting-函式提升"></a>Function hoisting 函式提升</h3><ul><li>函示宣告式（function declaration）被提升</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo();  &#x2F;&#x2F; &quot;bar&quot;</span><br><span class="line">function foo()&#123;</span><br><span class="line">    console.log(&#39;bar&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函示表示式（function Expressions）不會被提升</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baz();  &#x2F;&#x2F;TypeError:baz is not a function</span><br><span class="line">var baz &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;bar2&#39;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Global-variables-全域變數"><a class="header-anchor" href="#Global-variables-全域變數"></a>Global variables 全域變數</h3><p>Global variables（全域變數）是global object（全域物件）的properties（屬性值）。</p><p>在網頁下，global object就是wondows，可以用<br><code>window.varialbe</code>來設定及存取global variables<br>可以指定<code>window</code>和<code>frame</code>物件來存取另個window和frame所宣告的全域變數<br>ex. parent.phoneNumber</p><h3 id="Constants-常數"><a class="header-anchor" href="#Constants-常數"></a>Constants 常數</h3><p>使用<code>const</code>來命常數</p><ul><li>程式執行時，常數不能透過賦值或重新宣告改變值</li><li>常數需被初始化</li><li>在同一個區塊中，使用const宣告的變數無法同時用在function和variable</li><li>對於object，const的機制會被打破（？暫時想不到這好的說法）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const myObject &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;;</span><br><span class="line">myObject.key &#x3D; &#39;otherValue&#39;</span><br><span class="line">&#x2F;&#x2F;print &quot;otherValue&quot;</span><br></pre></td></tr></table></figure><ul><li>array同object</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const myArray &#x3D; [&quot;html&quot;,&quot;css&quot;];</span><br><span class="line">myArray.push(&quot;JS&quot;);</span><br><span class="line">console.log(myArray);</span><br><span class="line">&#x2F;&#x2F;print [&quot;html&quot;, &quot;css&quot;, &quot;JS&quot;]</span><br></pre></td></tr></table></figure><h2 id="Data-structures-and-types-資料架構及型別"><a class="header-anchor" href="#Data-structures-and-types-資料架構及型別"></a>Data structures and types 資料架構及型別</h2><h3 id="Data-types資料型別"><a class="header-anchor" href="#Data-types資料型別"></a>Data types資料型別</h3><p>七種原生型別</p><ol><li>Boolean: <code>true</code> and <code>false</code>.</li><li>null: !=NULL</li><li>undefined</li><li>Number:整數-2^(253 -1) and 2^(253 -1) 之間的數字）或floating point number(浮點數)</li><li>Bigint:任意精度表示整數，使用bigint可以安全的儲存和運行大整數，ex.<code>9007199254740992n</code></li><li>String:連續的字符組成的字串</li><li>Symbol: 生成一個唯一的值</li></ol><blockquote><p>Symbol更多參考https://zhuanlan.zhihu.com/p/22652486</p></blockquote><p>及<br>Object：Array(陣列)、{}(物件)</p><p>objects(物件)可以想像成被命名過且用來裝數值的容器<br>function(函數)為應用程式所執行的步驟</p><h3 id="Data-type-conversion-資料型別轉換"><a class="header-anchor" href="#Data-type-conversion-資料型別轉換"></a>Data type conversion 資料型別轉換</h3><p>JavaScriptg是dynamically typed language（動態型別語言）：宣告變數時不用特地定義該值的資料型別，即程式自動轉譯</p><h3 id="Number-and-the-‘-’-operator-數字及‘＋’"><a class="header-anchor" href="#Number-and-the-‘-’-operator-數字及‘＋’"></a>Number and the ‘+’ operator 數字及‘＋’</h3><p>在expression中數字及字串使用’+'做串接時，會將數字轉為字串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;37&#39;-7  &#x2F;&#x2F; print 30</span><br><span class="line">&#39;37&#39;+4  &#x2F;&#x2F; print &quot;374&quot;</span><br></pre></td></tr></table></figure><h3 id="Converting-strings-to-number-轉換字串為數字"><a class="header-anchor" href="#Converting-strings-to-number-轉換字串為數字"></a>Converting strings to number 轉換字串為數字</h3><p>轉為字串：<code>parseInt()</code><br>語法：parseInt(string, radix)<br>radix為進制 <code>parseInt(100,2)</code> 表示用二進制解讀100,得出4</p><p>轉為浮點數：<code>parseFloat()</code></p><p>方法二為是使用 <code>+</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;1.1&#39;+&#39;1.1&#39; &#x2F;&#x2F;print &quot;1.11.1&quot;</span><br><span class="line">(+1.1)+(+1.1) &#x2F;&#x2F;print 2.2</span><br></pre></td></tr></table></figure><h2 id="Literals-字面值"><a class="header-anchor" href="#Literals-字面值"></a>Literals 字面值</h2><p>在JS中固定不可變動的值。</p><ul><li>Array literals</li><li>Boolean literals</li><li>Floating-point literals</li><li>Numeric literals</li><li>Object literals</li><li>RegExp literals</li><li>String literals</li></ul><h3 id="Array-literals-陣列-組數"><a class="header-anchor" href="#Array-literals-陣列-組數"></a>Array literals 陣列/組數</h3><p>使用&quot;[]&quot;做為陣列起手式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let coffees &#x3D; [&quot;frech roast&quot;,&quot;colombian&quot;,&quot;kons&quot;]</span><br></pre></td></tr></table></figure><h4 id="Extra-commas-in-array-literals-多餘的逗點"><a class="header-anchor" href="#Extra-commas-in-array-literals-多餘的逗點"></a>Extra commas in array literals 多餘的逗點</h4><p>沒有值得逗點會被賦undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let fish &#x3D; [&quot;Lion&quot;,,&quot;Angel&quot;];</span><br></pre></td></tr></table></figure><p>fish[0] = Lion<br>fish[1] = undefined<br>fish[2] = Angel</p><p>注意！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let drink &#x3D; [&quot;coke&quot;,&quot;coffee&quot;,]</span><br></pre></td></tr></table></figure><p>如果只有一個逗點會被忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let drink &#x3D; [&quot;coke&quot;,&quot;coffee&quot;,,]</span><br></pre></td></tr></table></figure><p><mark>兩個逗點的值才會是undefined</mark></p><h3 id="Boolean-literals-布林值"><a class="header-anchor" href="#Boolean-literals-布林值"></a>Boolean literals 布林值</h3><p>boolean有兩個literal值: <code>true</code> <code>false</code></p><p>The Boolean object is a wrapper around the primitive Boolean data type.</p><h3 id="Numeric-literals-數字"><a class="header-anchor" href="#Numeric-literals-數字"></a>Numeric literals 數字</h3><p>Number跟BigInt可用decimal(10進制)、hexadecimal(16進制)、octal(8進制)、binary(2進制)來表達</p><ul><li>10進制為字首不為0的連續數字</li><li>字首為0或0o(0O)為8進制，數字為（0-7）</li><li>字首為0x(0X)為16進制，（0-9）(a-f/A-F)<br>Ex.<code>0xa</code>=<code>0xA</code>=<code>10</code>、<code>0xf</code>=<code>0xF</code>=<code>15</code></li><li>字首為0b(0B)為2進制，（0-1）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0, 117 , -345, 194797894n &#x2F;&#x2F;decimal,10進制</span><br><span class="line">015, 0001, -0o77 , 0o827972937n &#x2F;&#x2F; octal,8進制</span><br><span class="line">0x123, 0x00111, -0x837975, 0x72648849n &#x2F;&#x2F; hexadecimal,16進制</span><br><span class="line">0b11, 0b0011, -0b11 , 0b101010111100n &#x2F;&#x2F;binary,2進制</span><br></pre></td></tr></table></figure><h3 id="Floating-point-literals"><a class="header-anchor" href="#Floating-point-literals"></a>Floating-point literals</h3><ul><li>可為正(+)、負數(-)</li><li>有’.’</li><li>需要至少一個正數，或有一個‘e/E’</li><li>浮點誤差，兩個有小數點的值相加會有小誤差</li></ul><p>語法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(+|-)][正數].[正數][e|E[(+|-)]正數]</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3.1415926</span><br><span class="line">-.1234567</span><br><span class="line">-3.1E+12</span><br><span class="line">.1e-23</span><br></pre></td></tr></table></figure><h3 id="Object-literals"><a class="header-anchor" href="#Object-literals"></a>Object literals</h3><p>由 <mark>{ }</mark> 組成<br>不可使用Object literal都做首行程式碼，會導致出錯，因為&quot;{&quot;會解讀成起始的block</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var sales &#x3D; &quot;Toyota&quot;;</span><br><span class="line"></span><br><span class="line">function carTypes(name)&#123;</span><br><span class="line">    if (name &#x3D;&#x3D;&#x3D; &#39;Honda&#39;)&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return &quot;Sorry, we don&#39;t sell&quot; + name + &quot;.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var car &#x3D; &#123;myCar:&quot;Satrun&quot;, getCar:carTypes(&#39;Honda&#39;),special:sales&#125;;</span><br><span class="line"></span><br><span class="line">console.log(car.myCar); &#x2F;&#x2F;Saturn</span><br><span class="line">console.log(car.getCar); &#x2F;&#x2F;Honda</span><br><span class="line">console.log(car.special); &#x2F;&#x2F;Toyota</span><br></pre></td></tr></table></figure><p>在<code>car</code>object中，第一個屬性為<code>myCar</code>並賦值字串<code>&quot;Saturn&quot;</code><br>第二個屬性<code>getCar</code>其值為function<code>carTypes(&quot;Honda&quot;)</code><br>第三個屬性<code>specail</code>其值為變數<code>sales</code></p><h4 id="取值方式"><a class="header-anchor" href="#取值方式"></a>取值方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var peter &#x3D; &#123;</span><br><span class="line">    name : &quot;peter&quot;,</span><br><span class="line">    score : 100,</span><br><span class="line">    phone : &quot;0988-123-456&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;兩種寫法都可以</span><br><span class="line">console.log(peter[&#39;score&#39;]);  &#x2F;&#x2F;print 100 </span><br><span class="line">console.log(peter.score);  &#x2F;&#x2F;print 100</span><br></pre></td></tr></table></figure><p>===</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var car &#x3D; &#123;manyCars:&#123;a:&#39;Saab&#39;,b:&#39;Jeep&#39;&#125;,7:&#39;Mazda&#39;&#125;;</span><br><span class="line">console.log(car.manyCars.b)  &#x2F;&#x2F; print Jeep</span><br><span class="line">console.log(car[7]);  &#x2F;&#x2F; print Mazda</span><br></pre></td></tr></table></figure><ul><li>物件的屬性名稱可以是任何字串及數字（也可以是空字串）<br>！注意：如果不是JS規範中的Identifier(Unicode letter,$,_,digits(0-9))則必須用引號（“”/‘’）標示<br><mark>不符屬性名稱</mark>或是<mark>數字</mark>不能透過<code>.</code>(dot)取值,但可以用<code>[]</code>取值<br><mark><code>[“”]</code></mark> 的用法可以穩定取值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var unusualPropertyNames &#x3D; &#123;</span><br><span class="line">  &#39;&#39;: &#39;An empty string&#39;,</span><br><span class="line">  &#39;!&#39;: &#39;Bang!&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/MD2Vuun.png" alt></p><h4 id="Enhanced-Object-literals-增強用法"><a class="header-anchor" href="#Enhanced-Object-literals-增強用法"></a>Enhanced Object literals 增強用法</h4><blockquote><p>這篇很讚：<a href="https://ithelp.ithome.com.tw/articles/10208316" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10208316</a></p></blockquote><p>In ES2015/ES6:<br>可以使用<code>foo</code>的簡寫方式，等於 <code>foo:foo</code></p><p><mark>ES5</mark></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 1, y &#x3D; 2;</span><br><span class="line">var object &#x3D; &#123;</span><br><span class="line">    x:x,</span><br><span class="line">    y:y</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(object.x); &#x2F;&#x2F;print 1</span><br></pre></td></tr></table></figure><p><mark>ES6</mark></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; 1, y &#x3D; 2;</span><br><span class="line">var object &#x3D; &#123;</span><br><span class="line">    x,</span><br><span class="line">    y</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(object.x);  &#x2F;&#x2F;print 1</span><br></pre></td></tr></table></figure><blockquote><p>來源：<a href="https://subscription.packtpub.com/book/web_development/9781785884443/1/ch01lvl1sec15/the-enhanced-object-literals" target="_blank" rel="noopener">https://subscription.packtpub.com/book/web_development/9781785884443/1/ch01lvl1sec15/the-enhanced-object-literals</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D;&#123;</span><br><span class="line">    __proto__:theProtoObj,</span><br><span class="line">    handler,   &#x2F;&#x2F; 等於handler:handler</span><br><span class="line">    toString()&#123;</span><br><span class="line">    &#x2F;&#x2F;Super calls</span><br><span class="line">    return &#39;d&#39; + super.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;Computed(dynamic)property names</span><br><span class="line">    [&#39;prop&#39; + (()&#x3D;&gt;42)()]:42</span><br><span class="line">&#125;.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var foo &#x3D; &#123;a: &quot;alpha&quot;, 2: &quot;two&quot;&#125;;</span><br><span class="line">console.log(foo.a);    &#x2F;&#x2F; alpha</span><br><span class="line">console.log(foo[2]);   &#x2F;&#x2F; two</span><br><span class="line">&#x2F;&#x2F;console.log(foo.2);  &#x2F;&#x2F; SyntaxError: missing ) after argument list</span><br><span class="line">&#x2F;&#x2F;console.log(foo[a]); &#x2F;&#x2F; ReferenceError: a is not defined</span><br><span class="line">console.log(foo[&quot;a&quot;]); &#x2F;&#x2F; alpha</span><br><span class="line">console.log(foo[&quot;2&quot;]); &#x2F;&#x2F; two</span><br></pre></td></tr></table></figure><h3 id="RegExp-literals-正規表達式"><a class="header-anchor" href="#RegExp-literals-正規表達式"></a>RegExp literals 正規表達式</h3><p>使用<code>/foo/</code> 斜括弧表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var re &#x3D; &#x2F;ab+c&#x2F;;</span><br></pre></td></tr></table></figure><h3 id="String-literals-字串"><a class="header-anchor" href="#String-literals-字串"></a>String literals 字串</h3><p>是Zero或多個符號（characters）使用<code>&quot;&quot;</code>或<code>''</code>表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39;foo&#39;</span><br><span class="line">&quot;foo&quot;</span><br><span class="line">&#39;1234&#39;</span><br><span class="line">&quot;DD cheer up&quot;</span><br></pre></td></tr></table></figure><p><code>string.length</code>可以判讀字串長度(含空白格)<br><code>console.log(&quot;DD cheer up!&quot;.length)  // print 12</code></p><h4 id="Template-literals"><a class="header-anchor" href="#Template-literals"></a>Template literals</h4><p>使用 (back-tick) （數字鍵1旁邊的鍵）<code>  </code> 來包住<br>提供syntactic sugar(語法糖)來建構字串， similar to string interpolation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; String interpolation</span><br><span class="line">var name &#x3D; &#39;Bob&#39;, time &#x3D; &#39;today&#39;;</span><br><span class="line">&#96;Hello $&#123;name&#125;, how are you $&#123;time&#125;?&#96;</span><br></pre></td></tr></table></figure><h4 id="using-special-characters-in-strings"><a class="header-anchor" href="#using-special-characters-in-strings"></a>using special characters in strings</h4><p>詳見<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types" target="_blank" rel="noopener">MDN</a></p><h4 id="Escaping-characters-避免字符"><a class="header-anchor" href="#Escaping-characters-避免字符"></a>Escaping characters 避免字符</h4><ul><li>不建議使用<br>如果要在“”內在用“”，必須插入&quot;&quot;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var quote &#x3D; &quot;He read \&quot;The Cremation of Sam McGee\&quot; by R.W. Service. &quot;; </span><br><span class="line">console.log(quote)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;print He read &quot;The Cremation of Sam McGee&quot; by R.W. Service.</span><br></pre></td></tr></table></figure><p>若要加入“\”本身這個字符，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var home &#x3D; &#39;c:\\temp&#39;;</span><br><span class="line">console.log(home);  &#x2F;&#x2F; print c:\temp</span><br></pre></td></tr></table></figure><p>若沒有加則會</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var home &#x3D; &#39;c:\temp&#39;;</span><br><span class="line">console.log(home);   &#x2F;&#x2F;print c:emp</span><br></pre></td></tr></table></figure><p>若撰寫程式碼需換行可以加入<code>\</code>，讓換行之間可以延續不出錯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &#39; this string \</span><br><span class="line">is broken \</span><br><span class="line">across multiple \</span><br><span class="line">lines.&#39;</span><br><span class="line"></span><br><span class="line">console.log(str) &#x2F;&#x2F;pring this string is broken across multiple line</span><br></pre></td></tr></table></figure><p>沒打斜槓就會print Uncaught SyntaxError: Invalid or unexpected token</p><p>若想換行但不使用<code>\</code>，可以把引號改為(back-tick) （數字鍵1旁邊的鍵）而不出錯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var poem &#x3D; </span><br><span class="line">&#96;Roses are red, </span><br><span class="line">Violets are blue. </span><br><span class="line">Sugar is sweet, </span><br><span class="line">and so is foo.&#96;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇是從0開始的JS新手，以閱讀&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MDN&lt;/a&gt;上的javascript開始&lt;/p
      
    
    </summary>
    
    
      <category term="JS新手村" scheme="https://diyunhung.github.io/categories/JS%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="javascript" scheme="https://diyunhung.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
